<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Station001_Sequencer" Id="{9e4077ec-ff29-45f6-81c9-258ca60b40f5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Station001_Sequencer EXTENDS TcoCore.TcoSequencer
VAR
	_horizontal : fbPiston(THIS^);
	_vertical : fbPiston(THIS^);
	_gripper : fbPiston(THIS^);
END_VAR

VAR
	_switchToStep : BOOL;
	_failedToLoad : BOOL;
END_VAR

VAR
	_simTimerValue : UINT := 500;
	_simTimer : Tc2_Standard.TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
]]></ST>
    </Implementation>
    <Method Name="Init" Id="{0e1ddce9-53d5-4028-a87a-edba4ed235a8}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_vertical();
_horizontal();
_gripper();

_simTimer(IN := TRUE, PT := UINT_TO_TIME(_simTimerValue));
SimulateCylinder(_vertical);
SimulateCylinder(_horizontal);
SimulateCylinder(_gripper);

IF(_switchToStep) THEN
	THIS^._stepModeControler.ChangeState(TcoCore.eSequencerMode.StepMode);
	THIS^.Messenger.Notify('Sequencer is in step mode');
ELSE
	THIS^._stepModeControler.ChangeState(TcoCore.eSequencerMode.CyclicMode);
END_IF




IF(Step(0, 
		TRUE, 
		'INIT')) THEN
//-----------------------------------------------------
	THIS^.StepCompleteWhen(TRUE);
//-----------------------------------------------------	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Main" Id="{6c7ea6ad-aa4c-4717-ac51-7750945d5e4c}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Main method of the sequener. Custom code needs to be placed here. The sequencer is executed by call of InstanceName.Run() method.
			This method is abstract, and it must be overridden in derived block.
		</summary>
	</docu>
~*)
METHOD  Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Init();

IF(Step(100, 
		TRUE, 
		'MOVE ALL CYLINDERS TO GROUND POSITION')) THEN
//-----------------------------------------------------
	StepCompleteWhen(_horizontal.MoveUp().Done AND_THEN 
					 _vertical.MoveLeft().Done AND_THEN 
					 _gripper.Open().Done);
//-----------------------------------------------------	
END_IF


IF(Step(200, 
		TRUE, 
		'MOVE VERTICAL CYLINDER DOWN')) THEN
//-----------------------------------------------------
	StepCompleteWhen(_vertical.MoveDown().Done);
//-----------------------------------------------------	
END_IF


IF(Step(300, 
		TRUE, 
		'CLOSE GRIPPER')) THEN
//-----------------------------------------------------
	IF(_gripper.Close().Done) THEN
		IF(_failedToLoad) THEN
			RequestStep(100);
		ELSE
			StepCompleteWhen(TRUE);	
		END_IF;	
		
	END_IF;		
//-----------------------------------------------------	
END_IF

IF(Step(400, 
		TRUE, 
		'MOVE VERTICAL CYLINDER UP')) THEN
//-----------------------------------------------------
	StepCompleteWhen(_vertical.MoveUp().Done);
//-----------------------------------------------------	
END_IF

IF(Step(500, 
		TRUE, 
		'MOVE HORIZONTAL CYLINDER TO UNLOAD POSITION')) THEN
//-----------------------------------------------------
	StepCompleteWhen(_horizontal.MoveRight().Done);
//-----------------------------------------------------	
END_IF

IF(Step(600, 
		TRUE, 
		'MOVE VERTICAL CYLINDER DOWN')) THEN
//-----------------------------------------------------
	StepCompleteWhen(_vertical.MoveDown().Done);
//-----------------------------------------------------	
END_IF

IF(Step(700, 
		TRUE, 
		'OPEN GRIPPER')) THEN
//-----------------------------------------------------
	StepCompleteWhen(_gripper.Open().Done);
//-----------------------------------------------------	
END_IF

IF(Step(800, 
		TRUE, 
		'CLOSE SEQUENCE')) THEN
//-----------------------------------------------------
	SequenceComplete();
//-----------------------------------------------------	
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStateChange" Id="{5e443d3a-7ab3-4567-ab58-5e3e7a3e90a2}">
      <Declaration><![CDATA[METHOD OnStateChange
VAR_INPUT
	PreviousState	: INT;
	NewState 		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// THIS^.Restore();
_stepModeControler._stepForward.Restore();
_stepModeControler._stepBackward.Restore();

IF(_stepModeControler._stepIn.Done) THEN _stepModeControler._stepIn.Restore(); END_IF;

_simTimer(IN := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimulateCylinder" Id="{bb566744-42c1-4ea5-8a1b-31c9c19c7632}">
      <Declaration><![CDATA[METHOD SimulateCylinder
VAR_IN_OUT
	ioCyclinder : fbPiston;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ioCyclinder.iHomePositionSensor := ioCyclinder.qHomePositionActuator AND _simTimer.Q;
ioCyclinder.iWorkPositionSensor := ioCyclinder.qWorkPositionActuator AND _simTimer.Q;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>